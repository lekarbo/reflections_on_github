# "git init" para iniciar un repositorio

# "git status" para ver el estado del repositorio (mostrará información relevante como por ejemplo los archivos que trackea, los ultimos commits, etc...)

# "git diff [no arguments]" es para ver las diferencias entre el "working directory" y el "staging area".

# "git diff --staged" es para ver las diferencias entre el staging area y el ultimo commit.

# "git reset --hard" para resetear todos los cambios en el "working directory" y el "staging area".

# "git branch [nombre_del_branch]" para hacer un nuevo branch para probar alguna nueva funcionalidad y estructura del repo
 
# "git checkout [nombre_del_branch]" para intercambiar entre branches ("git checkout master" para volver al principal)

# "git log --graph --oneline [lista de branches a mostar separados por espacio]" muestra un grafo de la historia de los branches que esta en la [lista de...]

# "git checkout -b [nombre_branch]" si se quiere hacer un nuevo branch desde el estado "detached HEAD" (habiendole hecho git checkout [id]) 

# "git merge [branch1 branch 2 ...]" combina los branch con el branch en que se está actualmente (en checkout o en master)

# "git show [commit_id]" compara el commit [commit_id] con su commit padre.

## cuando hay merging conflicts, entrás en modo MERGING para corregir esos conflictos.
-> aquí git hara cambios en los archivos conflictivos para arreglar esto:
--> "<<<<<<<<<HEAD" es mi codigo
--> ">>>>>>>>>master" es el codigo que esta en el master branch
--> "||||||||| merged common ancestor" es la version original que los branches a combinar (merge) han modificado
--> "========" cambios con respecto al "||||||||| ..." que hizo otro colaborador
## "git add [archivo conflictivo]" para poner el archivo conflictivo en el staging area y "git commit -m [wea]" para finalmente mergear.
 
# "git log -n [numero entero]" para mostrar solo los ultimos [numero entero] commits
